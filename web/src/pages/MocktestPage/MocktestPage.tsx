import { useState, useEffect } from 'react'
import { GoogleGenerativeAI, SchemaType } from "@google/generative-ai";
import LoadingAnimation from 'src/components/LoadingAnimation/LoadingAnimation';
import Popup from 'src/components/Popup/Popup';
import { Link, navigate } from '@redwoodjs/router'
import { AcademicCapIcon, Squares2X2Icon } from '@heroicons/react/24/solid'
import { useGlobal } from 'src/context/GlobalContext'
import { Metadata, useQuery, useMutation, gql } from '@redwoodjs/web'
import {
  GET_ANKI_CARDS,
  UPDATE_ANKI_CARD_POINT,
  UPDATE_STUDY_PROGRESS,
  GET_ANKI_TAGS
} from '../HomePage/HomPage.query'
import { QUESTION_TYPES } from './QuestionType';


const MocktestPage = () => {

  const global = useGlobal();
  useEffect(() => {
    if (global.isAuth == false) {
      navigate("/login")
    }
  }, [])


  const [questions, setQuestions] = useState([]);
  const [selectedAnswers, setSelectedAnswers] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [randomWords, setRandomWords] = useState([]);
  const [idx, setIdx] = useState([]);
  const [isPopupOpen, setIsOpen] = useState(false)
  const [correctCount, setCorrectCount] = useState(0);
  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true);
  const [numQuestions, setNumQuestions] = useState(5); // S·ªë l∆∞·ª£ng c√¢u h·ªèi (m·∫∑c ƒë·ªãnh: 5)
  const [questionType, setQuestionType] = useState("kanji"); // Th·ªÉ lo·∫°i c√¢u h·ªèi (m·∫∑c ƒë·ªãnh: t·∫•t c·∫£)

  const [updateAnkiCardPoint] = useMutation(UPDATE_ANKI_CARD_POINT)
  const [updateStudyProgress] = useMutation(UPDATE_STUDY_PROGRESS)

  const { data: tagsData, loading: tagsLoading } = useQuery(GET_ANKI_TAGS);
  const tags = tagsData?.ankiTags || [];
  const [selectedTagId, setSelectedTagId] = useState("");

  const handleTagChange = (e) => {
    setSelectedTagId(e.target.value);
  };


  const handleNumQuestionsChange = (event) => {
    setNumQuestions(parseInt(event.target.value, 10));
  };

  const handleQuestionTypeChange = (event) => {
    setQuestionType(event.target.value);
  };

  const { data: cardsData, loading: cardsLoading, error: cardsError } = useQuery(GET_ANKI_CARDS);

  // const handleShuffle = () => {
  //   const shuffled = [...cardsData.ankiCards].sort(() => 0.5 - Math.random());
  //   setRandomWords(shuffled.slice(0, 10).map(card => card.front));
  //   setIdx(shuffled.slice(0, 10).map(card => card.id));
  // }
  // const handleShuffle = () => {
  //   const shuffled = [...cardsData.ankiCards].sort(() => 0.5 - Math.random()).slice(0, numQuestions);
  //   const shuffledWords = shuffled.map(card => card.front);
  //   const shuffledIdx = shuffled.map(card => card.id);
  //   setRandomWords(shuffledWords);
  //   setIdx(shuffledIdx);
  // };
  const handleShuffle = () => {
    if (!cardsData?.ankiCards) return;

    let filteredCards = [...cardsData.ankiCards];

    // N·∫øu c√≥ ch·ªçn tag, ch·ªâ l·∫•y c√°c th·∫ª thu·ªôc tag ƒë√≥
    if (selectedTagId) {
      filteredCards = filteredCards.filter(card =>
        card.tags.some(tag => tag.id == selectedTagId)
      );
    }

    // N·∫øu s·ªë l∆∞·ª£ng th·∫ª √≠t h∆°n numQuestions, gi·ªõi h·∫°n l·∫°i
    const limit = Math.min(numQuestions, filteredCards.length);

    const shuffled = filteredCards
      .sort(() => 0.5 - Math.random())
      .slice(0, limit);

    setRandomWords(shuffled.map(card => card.front));
    setIdx(shuffled.map(card => card.id));
  };

  useEffect(handleShuffle, [numQuestions, selectedTagId])

  const handleClosePopup = () => {
    setIsOpen(false)
  }

  const handleOpenPopup = () => {
    setIsOpen(true)
  }

  useEffect(() => {
    if (cardsData?.ankiCards?.length > 0) {
      handleShuffle()
    }
  }, [cardsData]);

  useEffect(() => {
    // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c ch·ªçn hay ch∆∞a
    setIsSubmitDisabled(questions.length === 0 || Object.keys(selectedAnswers).length < questions.length);
  }, [selectedAnswers, questions]);


  const genAI = new GoogleGenerativeAI(process.env.REDWOOD_ENV_API_KEY);

  const shuffleArray = (array) => {
    let shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };

  const makeRequest = async () => {
    setIsLoading(true)
    try {
      const schema = {
        description: "List of JLPT quiz questions with explanations",
        type: SchemaType.ARRAY,
        items: {
          type: SchemaType.OBJECT,
          properties: {
            questionType: { type: SchemaType.STRING, nullable: false },
            question: { type: SchemaType.STRING, nullable: false, description: "C√¢u h·ªèi JLPT, ƒë∆∞·ª£c vi·∫øt b·∫±ng Ti·∫øng Nh·∫≠t" },
            choices: { type: SchemaType.ARRAY, items: { type: SchemaType.STRING }, nullable: false },
            correctAnswer: { type: SchemaType.STRING, nullable: false, description: "Ph·∫£i t·ªìn t·∫°i trong danh s√°ch choices" },
            explanation: { type: SchemaType.STRING, nullable: false },
          },
          required: ["questionType", "question", "choices", "correctAnswer", "explanation"],
        },
      };

      const model = genAI.getGenerativeModel({
        model: "gemini-2.0-flash",
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: schema,
        },
      });

      const prompt = `###
      B·∫°n l√† m·ªôt ng∆∞·ªùi t·∫°o ƒë·ªÅ thi ti·∫øng Nh·∫≠t chuy√™n v·ªÅ luy·ªán thi JLPT.
      Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra c√°c c√¢u h·ªèi JLPT trung b√¨nh kh√≥ ƒë·ªÉ t√¥i c√≥ th·ªÉ luy·ªán t·∫≠p.
      ### RULE:
      ${QUESTION_TYPES[questionType].prompt}

      ### TASK: H√£y t·∫°o ${numQuestions} c√¢u h·ªèi m·ªõi d·ª±a tr√™n t·ª´ v·ª±ng sau: ${randomWords.join(", ")}.`;

      const result = await model.generateContent(prompt);
      const jsonData = JSON.parse(result.response.text());

      const mappedQuestions = jsonData.map((q, index) => {
        let shuffledChoices = shuffleArray(q.choices);
        return {
          ...q,
          choices: shuffledChoices,  // X√°o tr·ªôn ƒë√°p √°n
          correctAnswer: q.correctAnswer, // Gi·ªØ nguy√™n ƒë√°p √°n ƒë√∫ng
          word: randomWords[index], // L∆∞u t·ª´ v·ª±ng t∆∞∆°ng ·ª©ng
          cardId: idx[index], // G√°n ID c·ªßa th·∫ª
        };
      });

      setQuestions(mappedQuestions);
      setSelectedAnswers({});
      setSubmitted(false);
    } catch (error) {
      console.error("L·ªói khi t·∫°o c√¢u h·ªèi:", error);
    }
    handleShuffle()
    setIsLoading(false)
  };

  const handleSelectAnswer = (questionIndex, choice) => {
    setSelectedAnswers((prev) => ({ ...prev, [questionIndex]: choice }));
  };

  const handleSubmit = () => {
    if (isSubmitDisabled) {
      alert("‚ö†Ô∏è B·∫°n c·∫ßn ch·ªçn t·∫•t c·∫£ c√°c c√¢u tr·∫£ l·ªùi tr∆∞·ªõc khi n·ªôp b√†i!");
      return;
    }

    let correct = 0;
    questions.forEach((q, index) => {
      if (selectedAnswers[index] === q.correctAnswer) {
        correct += 1;
        let pointChange = 1;
        let status = "good";
        try {
          updateStudyProgress({
            variables: { status }
          });

          updateAnkiCardPoint({
            variables: { id: q.cardId, pointChange }, // üî• S·ª≠ d·ª•ng `q.cardId`
          });
          // alert(`C·∫≠p nh·∫≠t th·∫ª ID: ${q.cardId} - ${q.word} ‚úÖ`);
        } catch (error) {
          console.error("L·ªói c·∫≠p nh·∫≠t ƒëi·ªÉm:", error);
        }
      } else {
        let pointChange = -1;
        let status = "bad";
        try {
          updateStudyProgress({
            variables: { status }
          });

          updateAnkiCardPoint({
            variables: { id: q.cardId, pointChange }, // üî• S·ª≠ d·ª•ng `q.cardId`
          });
          // alert(`C·∫≠p nh·∫≠t th·∫ª ID: ${q.cardId} - ${q.word} ‚úÖ`);
        } catch (error) {
          console.error("L·ªói c·∫≠p nh·∫≠t ƒëi·ªÉm:", error);
        }
      }
    });

    setCorrectCount(correct);
    setSubmitted(true);
    setIsSubmitDisabled(true);
    handleOpenPopup();
  };

  return (
    <main className="p-4 mx-auto w-full sm:w-3/4 lg:w-1/2 flex flex-col relative">
      <Metadata title="Mock Test" description="JLPT Practice Quiz" />

      <h1 className="text-xl font-bold mb-4 text-white">‚òï JLPT</h1>

      <div className="bg-gray-800 text-white p-4 rounded mb-4">
        <h2 className="text-lg font-bold mb-2">T·∫°o c√¢u h·ªèi JLPT</h2>
        <div className="flex flex-col sm:flex-row gap-2 mb-2">
          {/* Ch·ªçn s·ªë l∆∞·ª£ng c√¢u h·ªèi */}
          <div className="flex-1">
            <label className="block text-sm text-gray-300">S·ªë l∆∞·ª£ng c√¢u h·ªèi:</label>
            <select
              value={numQuestions}
              onChange={handleNumQuestionsChange}
              className="bg-gray-700 text-white p-2 rounded w-full"
            >
              {[5, 10, 12].map((num) => (
                <option key={num} value={num}>
                  {num} c√¢u
                </option>
              ))}
            </select>
          </div>

          {/* Ch·ªçn th·ªÉ lo·∫°i c√¢u h·ªèi */}
          <div className="flex-1">
            <label className="block text-sm text-gray-300">Th·ªÉ lo·∫°i c√¢u h·ªèi:</label>
            <select
              value={questionType}
              onChange={handleQuestionTypeChange}
              className="bg-gray-700 text-white p-2 rounded w-full"

            >
              {/* <option value="kanji">C√°ch ƒë·ªçc Kanji</option>
              <option value="understand">Th√¥ng hi·ªÉu</option>
              <option value="usage">C√°ch d√πng t·ª´</option>
              <option value="meaning">Nghƒ©a c·ªßa t·ª´</option> */}
              {Object.entries(QUESTION_TYPES).map(([key, value]) => (
                <option key={key} value={key}>
                  {value.title}
                </option>
              ))}
            </select>
          </div>

          {/* Ch·ªçn tag */}
          <div className="flex-1">
            <label className="block text-sm text-gray-300">Ch·ªçn Tag:</label>
            <select
              value={selectedTagId}
              onChange={handleTagChange}
              className="bg-gray-700 text-white p-2 rounded w-full"
            >
              <option value="">-- T·∫•t c·∫£ --</option>
              {tags.map(tag => (
                <option key={tag.id} value={tag.id}>
                  {tag.name}
                </option>
              ))}
            </select>
          </div>


        </div>

        <LoadingAnimation state={isLoading} texts={["ƒêang t·∫°o c√¢u h·ªèi...", (
          <button
            onClick={makeRequest}
            className="bg-blue-500 px-4 flex w-full py-2 rounded text-white hover:bg-blue-700"
            disabled={randomWords.length === 0}
          >
            üîÑ T·∫°o Quiz (T·ª´: {randomWords.join(", ") || "ƒêang t·∫£i..."})
          </button>
        )]} />

      </div>

      {questions.length > 0 && (
  <div className="bg-gray-800 text-white p-4 sm:p-10 rounded mb-4">
    <h2 className="text-lg font-bold mb-2">üìù B√†i ki·ªÉm tra</h2>
    {questions.map((q, index) => {
      const isCorrect = submitted && selectedAnswers[index] === q.correctAnswer;
      const isIncorrect = submitted && selectedAnswers[index] !== q.correctAnswer;

      return (
        <div
          key={index}
          className={`relative mb-4 p-4 pt-12 border border-gray-600 rounded ${
            isIncorrect ? "border-red-500" : "border-gray-600"
          }`}
        >
          <span className="absolute border border-blue-500 bg-blue-500/10 rounded-md px-2 py-1 text-blue-500 font-semibold text-sm left-4 top-2">
            {q.questionType}
          </span>
          <p className="text-white font-semibold">{index + 1}. {q.question}</p>
          <div className="mt-2 space-y-2">
            {q.choices.map((choice, choiceIndex) => {
              const isSelected = selectedAnswers[index] === choice;
              const isCorrectChoice = choice === q.correctAnswer;

              return (
                <label
                  key={choiceIndex}
                  className={`block p-2 rounded border cursor-pointer transition-colors duration-200
                    ${
                      !submitted
                        ? isSelected
                          ? "bg-blue-500/10 border border-blue-500 text-white"
                          : "bg-gray-700 hover:bg-gray-600 border-gray-700"
                        : isSelected
                        ? isCorrect
                          ? "bg-green-400/20 text-white border-green-500"
                          : "bg-red-500/20 text-white border-red-600"
                        : isCorrectChoice
                        ? "bg-green-400/20 border-green-500 text-white"
                        : "bg-gray-700 border-gray-700"
                    }
                  `}
                  onClick={() => !submitted && handleSelectAnswer(index, choice)}
                >
                  <input
                    type="radio"
                    name={`question-${index}`}
                    value={choice}
                    checked={isSelected}
                    disabled={submitted}
                    onChange={() => handleSelectAnswer(index, choice)}
                    className="hidden"
                  />
                  {choice}
                </label>
              );
            })}
          </div>

          {submitted && (
            <>
              <p className={`mt-2 font-semibold ${isCorrect ? 'text-green-600' : 'text-red-400'}`}>
                {isCorrect ? "‚úÖ ƒê√∫ng!" : `‚ùå Sai! ƒê√°p √°n ƒë√∫ng: ${q.correctAnswer}`}
              </p>
              <p className="mt-2 text-gray-300">üìù <strong>Gi·∫£i th√≠ch:</strong> {q.explanation}</p>
            </>
          )}
        </div>
      );
    })}

          <button
            onClick={handleSubmit}
            disabled={isSubmitDisabled}
            className={`px-4 py-2 rounded mt-4 ${
              isSubmitDisabled ? "bg-gray-500 cursor-not-allowed" : "bg-blue-500 hover:bg-blue-700 text-white"
            }`}
          >
            N·ªôp b√†i
          </button>
        </div>
      )}
      {/* Popup th√¥ng b√°o k·∫øt qu·∫£ */}
      <Popup title={""} isOpen={isPopupOpen} onClose={handleClosePopup}>
        <p className="text-xl text-center my-16 font-bold text-white">üéâ B·∫°n ƒë√£ l√†m ƒë√∫ng {correctCount}/{questions.length} c√¢u!</p>
      </Popup>

      <div className='fixed right-2 bottom-4 sm:bottom-2 flex gap-2 flex-col-reverse transition-transform'>
        {/* N√∫t th∆∞ vi·ªán */}
        <Link
          to='/home'
          className="text-white rounded bg-blue-600 hover:bg-blue-700 p-2"
        >
          <AcademicCapIcon className="h-6 w-6 text-white"/>
        </Link>
        <Link
          to='/library'
          className="text-white rounded bg-blue-600 hover:bg-blue-700 p-2"
        >
          <Squares2X2Icon className="h-6 w-6 text-white"/>
        </Link>
      </div>
    </main>


  );
};

export default MocktestPage;
