import { useState } from 'react'
import { GoogleGenerativeAI, SchemaType } from '@google/generative-ai'
import LoadingAnimation from 'src/components/LoadingAnimation/LoadingAnimation'
import Popup from 'src/components/Popup/Popup'
import { Link } from '@redwoodjs/router'
import { ArrowUturnLeftIcon } from '@heroicons/react/24/solid'
import { Metadata } from '@redwoodjs/web'
import { SEED_SENTENCES } from './DokkaiSeed'

// C·∫≠p nh·∫≠t interface
interface EvaluationResult {
  accuracy: number
  fluency: number
  style: number
  grammar: number
  accuracy_feedback: string
  fluency_feedback: string
  style_feedback: string
  grammar_feedback: string
  gold_answer: string
  accuracy_marked: string[]
  fluency_marked: string[]
  style_marked: string[]
  grammar_marked: string[]
}

const TranslateTestPage = () => {
  const [isLoading, setIsLoading] = useState(false)
  const [isChecking, setIsChecking] = useState(false)
  const [generatedParagraph, setGeneratedParagraph] = useState('')
  const [paragraphTranslation, setParagraphTranslation] = useState('')
  const [highlightedSentence, setHighlightedSentence] = useState('')
  const [userTranslation, setUserTranslation] = useState('')
  const [evaluationResult, setEvaluationResult] = useState<EvaluationResult | null>(null)
  const [isPopupOpen, setIsOpen] = useState(false)
  const [showGoldAnswer, setShowGoldAnswer] = useState(false)
  const [highlightedWords, setHighlightedWords] = useState<string[]>([]) // State cho c√°c t·ª´ c·∫ßn highlight

  const genAI = new GoogleGenerativeAI(process.env.REDWOOD_ENV_API_KEY)

  const handleGenerateParagraph = async () => {
    setIsLoading(true)
    setGeneratedParagraph('')
    setHighlightedSentence('')
    setParagraphTranslation('')
    setUserTranslation('')
    setEvaluationResult(null)
    setShowGoldAnswer(false)
    setHighlightedWords([])

    try {
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
      const seed = SEED_SENTENCES[Math.floor(Math.random() * SEED_SENTENCES.length)]
      const prompt = `B·∫°n l√† m·ªôt nh√† vƒÉn. H√£y t·∫°o m·ªôt ƒëo·∫°n vƒÉn ti·∫øng Nh·∫≠t t·ª± nhi√™n, d√†i kho·∫£ng 150-200 t·ª´, c√≥ ch·ª©a c√¢u sau: "${seed.text}". ƒêo·∫°n vƒÉn n√™n n√≥i v·ªÅ cu·ªôc s·ªëng h√†ng ng√†y ho·∫∑c m·ªôt c√¢u chuy·ªán nh·ªè, tr√¨nh ƒë·ªô ·ªü m·ª©c ${seed.tag}.`

      const result = await model.generateContent(prompt)
      const paragraph = result.response.text()

      const translatePrompt = `H√£y d·ªãch ƒëo·∫°n vƒÉn ti·∫øng Nh·∫≠t sau sang ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n v√† ch√≠nh x√°c:\n\n${paragraph}`
      const translationResult = await model.generateContent(translatePrompt)
      setParagraphTranslation(translationResult.response.text())

      const sentences = paragraph.match(/[^„ÄÇ]+„ÄÇ[ ]?/g) || [paragraph]
      const sentenceToHighlight = sentences[Math.floor(Math.random() * sentences.length)]

      const highlightedParagraph = paragraph.replace(
        sentenceToHighlight,
        `<b class="text-yellow-400">${sentenceToHighlight}</b>`
      )

      setHighlightedSentence(sentenceToHighlight.trim())
      setGeneratedParagraph(highlightedParagraph)
    } catch (error) {
      console.error('L·ªói khi t·∫°o ƒëo·∫°n vƒÉn:', error)
      alert('ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o ƒëo·∫°n vƒÉn. Vui l√≤ng th·ª≠ l·∫°i.')
    }
    setIsLoading(false)
  }

  const handleCheckTranslation = async () => {
    if (!userTranslation.trim()) {
      alert('Vui l√≤ng nh·∫≠p b·∫£n d·ªãch c·ªßa b·∫°n.')
      return
    }
    setIsChecking(true)

    try {
      // C·∫≠p nh·∫≠t schema ƒë·ªÉ Gemini tr·∫£ v·ªÅ danh s√°ch c√°c t·ª´ c·∫ßn ƒë√°nh d·∫•u
      const schema = {
        type: SchemaType.OBJECT,
        properties: {
          gold_answer: { type: SchemaType.STRING, description: 'Nghƒ©a ti·∫øng vi·ªát ph√π h·ª£p nh·∫•t' },
          accuracy: { type: SchemaType.NUMBER, description: 'ƒêi·ªÉm ch√≠nh x√°c (t·ªëi ƒëa 40)' },
          fluency: { type: SchemaType.NUMBER, description: 'ƒêi·ªÉm t·ª± nhi√™n (t·ªëi ƒëa 25)' },
          style: { type: SchemaType.NUMBER, description: 'ƒêi·ªÉm phong c√°ch/ng·ªØ c·∫£nh (t·ªëi ƒëa 20)' },
          grammar: { type: SchemaType.NUMBER, description: 'ƒêi·ªÉm ng·ªØ ph√°p (t·ªëi ƒëa 15)' },
          accuracy_feedback: { type: SchemaType.STRING, description: 'Nh·∫≠n x√©t v·ªÅ ƒë·ªô ch√≠nh x√°c.' },
          fluency_feedback: { type: SchemaType.STRING, description: 'Nh·∫≠n x√©t v·ªÅ ƒë·ªô t·ª± nhi√™n.' },
          style_feedback: { type: SchemaType.STRING, description: 'Nh·∫≠n x√©t v·ªÅ phong c√°ch.' },
          grammar_feedback: { type: SchemaType.STRING, description: 'Nh·∫≠n x√©t v·ªÅ ng·ªØ ph√°p.' },
          accuracy_marked: { type: SchemaType.ARRAY, items: { type: SchemaType.STRING }, description: 'Danh s√°ch c√°c t·ª´/c·ª•m t·ª´ d·ªãch ch∆∞a ch√≠nh x√°c.'},
          fluency_marked: { type: SchemaType.ARRAY, items: { type: SchemaType.STRING }, description: 'Danh s√°ch c√°c t·ª´/c·ª•m t·ª´ d·ªãch ch∆∞a t·ª± nhi√™n.'},
          style_marked: { type: SchemaType.ARRAY, items: { type: SchemaType.STRING }, description: 'Danh s√°ch c√°c t·ª´/c·ª•m t·ª´ d·ªãch ch∆∞a ƒë√∫ng phong c√°ch.'},
          grammar_marked: { type: SchemaType.ARRAY, items: { type: SchemaType.STRING }, description: 'Danh s√°ch c√°c t·ª´/c·ª•m t·ª´ sai ng·ªØ ph√°p/ch√≠nh t·∫£.'},
        },
        required: [
          'gold_answer', 'accuracy', 'fluency', 'style', 'grammar',
          'accuracy_feedback', 'fluency_feedback', 'style_feedback', 'grammar_feedback',
          'accuracy_marked', 'fluency_marked', 'style_marked', 'grammar_marked'
        ],
      }

      const model = genAI.getGenerativeModel({
        model: 'gemini-1.5-flash',
        generationConfig: {
          responseMimeType: 'application/json',
          responseSchema: schema,
        },
      })

      const prompt = `B·∫°n l√† m·ªôt ng∆∞·ªùi ƒë√°nh gi√° b·∫£n d·ªãch chuy√™n nghi·ªáp. H√£y ƒë√°nh gi√° b·∫£n d·ªãch Ti·∫øng Vi·ªát cho c√¢u Ti·∫øng Nh·∫≠t sau v√† cho ƒëi·ªÉm chi ti·∫øt. C√°c ƒë√°nh gi√° kh√¥ng ƒë∆∞·ª£c m√¢u thu·∫´n v·ªõi gold_answer. H√£y th√™m m·ªôt ch√∫t icon v√† m·ªôt ch√∫t h√†i h∆∞·ªõc v√† x√©o x·∫Øt v√†o c√¢u feedback nh√©.\n\n### C√¢u Ti·∫øng Nh·∫≠t:\n${highlightedSentence}\n\n### B·∫£n d·ªãch Ti·∫øng Vi·ªát:\n${userTranslation}\n\n### Ti√™u ch√≠ ch·∫•m ƒëi·ªÉm v√† nh·∫≠n x√©t:\n1. Ch√≠nh x√°c (Accuracy): D·ªãch ƒë√∫ng nghƒ©a, ƒë·ªß √Ω. (T·ªëi ƒëa 40 ƒëi·ªÉm).\n2. T·ª± nhi√™n (Fluency): C√¢u d·ªãch tr√¥i ch·∫£y, t·ª± nhi√™n. (T·ªëi ƒëa 25 ƒëi·ªÉm).\n3. Phong c√°ch / Ng·ªØ c·∫£nh (Style/Context): Ph√π h·ª£p vƒÉn phong. (T·ªëi ƒëa 20 ƒëi·ªÉm).\n4. Ng·ªØ ph√°p (Grammar): ƒê√∫ng ng·ªØ ph√°p, ch√≠nh t·∫£. (T·ªëi ƒëa 15 ƒëi·ªÉm).\n\n### Y√™u c·∫ßu:\n- Cung c·∫•p ƒëi·ªÉm V√Ä nh·∫≠n x√©t ng·∫Øn g·ªçn b·∫±ng Ti·∫øng Vi·ªát cho T·ª™NG ti√™u ch√≠.\n- V·ªõi m·ªói ti√™u ch√≠, cung c·∫•p m·ªôt danh s√°ch c√°c t·ª´/c·ª•m t·ª´ trong b·∫£n d·ªãch Ti·∫øng Vi·ªát b·ªã m·∫Øc l·ªói t∆∞∆°ng ·ª©ng (n·∫øu c√≥).`

      const result = await model.generateContent(prompt)
      const jsonData = JSON.parse(result.response.text())

      setEvaluationResult(jsonData)
      setIsOpen(true)
    } catch (error) {
      console.error('L·ªói khi ki·ªÉm tra b·∫£n d·ªãch:', error)
      alert('ƒê√£ c√≥ l·ªói x·∫£y ra khi ki·ªÉm tra. Vui l√≤ng th·ª≠ l·∫°i.')
    }
    setIsChecking(false)
  }

  const handleClosePopup = () => {
    setIsOpen(false)
    setHighlightedWords([])
  }

  // H√†m render b·∫£n d·ªãch v·ªõi c√°c t·ª´ ƒë∆∞·ª£c highlight
  const renderUserTranslationWithHighlights = (text: string, words: string[]) => {
    if (!words || words.length === 0) {
      return text;
    }
    const escapedWords = words.map(word => word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
    const regex = new RegExp(`(${escapedWords.join('|')})`, 'gi');
    const parts = text.split(regex);

    return (
      <p className="text-white">
        {parts.map((part, i) =>
          words.some(word => part.toLowerCase() === word.toLowerCase()) ? (
            <span key={i} className="underline text-yellow-500 underline-offset-2 rounded transition-all duration-300">
              {part}
            </span>
          ) : (
            <span key={i}>{part}</span>
          )
        )}
      </p>
    );
  };


  const totalScore = evaluationResult
    ? evaluationResult.accuracy + evaluationResult.fluency + evaluationResult.style + evaluationResult.grammar
    : 0

  const feedbackItems = evaluationResult ? [
    { title: 'Ch√≠nh x√°c', score: evaluationResult.accuracy, maxScore: 40, feedback: evaluationResult.accuracy_feedback, marked: evaluationResult.accuracy_marked },
    { title: 'T·ª± nhi√™n', score: evaluationResult.fluency, maxScore: 25, feedback: evaluationResult.fluency_feedback, marked: evaluationResult.fluency_marked },
    { title: 'Phong c√°ch', score: evaluationResult.style, maxScore: 20, feedback: evaluationResult.style_feedback, marked: evaluationResult.style_marked },
    { title: 'Ng·ªØ ph√°p', score: evaluationResult.grammar, maxScore: 15, feedback: evaluationResult.grammar_feedback, marked: evaluationResult.grammar_marked },
  ] : []

  return (
    <main className="p-4 mx-auto w-full sm:w-3/4 lg:w-2/3 flex flex-col relative">
      <Metadata title="Luy·ªán D·ªãch" description="Trang luy·ªán d·ªãch ti·∫øng Nh·∫≠t" />
      <Link to="/home">
        <ArrowUturnLeftIcon className="h-6 w-6 text-white mb-2" />
      </Link>

      <div className="bg-gray-800 text-white p-4 rounded mb-4 flex flex-col gap-4">
        <h2 className="text-lg font-bold">T·∫°o ƒëo·∫°n vƒÉn luy·ªán d·ªãch</h2>
        <LoadingAnimation
          state={isLoading}
          texts={['ƒêang t·∫°o ƒëo·∫°n vƒÉn...', <button
            onClick={handleGenerateParagraph}
            className="bg-blue-600 px-4 flex w-full py-2 rounded text-white hover:bg-blue-700 justify-center"
          >
            T·∫°o ƒëo·∫°n vƒÉn üìÑ
          </button>]} />
      </div>

      {generatedParagraph && (
        <div className="bg-gray-800 text-white p-4 sm:p-10 rounded mb-4 flex flex-col gap-4">
          <div>
            <h3 className="text-lg font-bold mb-2">ƒêo·∫°n vƒÉn ti·∫øng Nh·∫≠t</h3>
            <p
              className="text-gray-300 leading-loose"
              dangerouslySetInnerHTML={{ __html: generatedParagraph }}
            ></p>
                 {evaluationResult ? (
                 <div className="mt-4 border-t border-gray-700 pt-4">
                    <h4 className="font-semibold text-blue-400">B·∫£n d·ªãch to√†n ƒëo·∫°n vƒÉn (tham kh·∫£o):</h4>
                    <p className="text-sm text-gray-300 mt-1">{paragraphTranslation}</p>
                 </div>
              ) : ""}
          </div>
          <div>
            <h3 className="text-lg font-bold mb-2">
              D·ªãch c√¢u ƒë∆∞·ª£c t√¥ ƒë·∫≠m sang ti·∫øng Vi·ªát
            </h3>
            <textarea
              value={userTranslation}
              onChange={(e) => setUserTranslation(e.target.value)}
              className="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white"
              rows={3}
              maxLength={256}
              placeholder="Nh·∫≠p b·∫£n d·ªãch c·ªßa b·∫°n ·ªü ƒë√¢y..." />
          </div>
          <LoadingAnimation
            state={isChecking}
            texts={['ƒêang ch·∫•m ƒëi·ªÉm...', <button
              onClick={handleCheckTranslation}
              disabled={!userTranslation.trim()}
              className="bg-green-500 px-4 flex w-full py-2 rounded text-white hover:bg-green-700 justify-center disabled:bg-gray-500 disabled:cursor-not-allowed"
            >
              Ki·ªÉm tra
            </button>]} />
        </div>
      )}

      {evaluationResult && (
        <Popup title={"K·∫øt qu·∫£ chi ti·∫øt"} isOpen={isPopupOpen} onClose={handleClosePopup}>
          <div className="text-white p-4 sm:p-6 w-full flex flex-col gap-4">
            <div className="text-center mb-4">
              <span className="text-5xl font-bold">{totalScore}</span>
              <span className="text-2xl text-gray-400">/100</span>
            </div>
            <div className='flex flex-col bg-gray-900/50 border border-gray-700 rounded-md p-4 gap-2'>
              <div>
                <h4 className="font-semibold text-gray-400 text-sm mb-1">B·∫£n d·ªãch c·ªßa b·∫°n:</h4>
                {/* Thay th·∫ø HighlightText b·∫±ng h√†m render m·ªõi */}
                {renderUserTranslationWithHighlights(userTranslation, highlightedWords)}
              </div>

              {showGoldAnswer ? (
                <div className="mt-1">
                   <span className="text-sm text-blue-400">ƒê√°p √°n tham kh·∫£o (c√¢u): </span>
                   <span className="text-sm text-blue-300">{evaluationResult.gold_answer}</span>
                </div>
              ) : (
                <button
                    onClick={() => setShowGoldAnswer(true)}
                    className="text-left text-sm text-blue-400 hover:text-blue-300 p-1 rounded hover:bg-blue-500/10 -ml-1"
                >
                    Xem ƒë√°p √°n tham kh·∫£o (c√¢u)...
                </button>
              )}
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 mt-2">
              {feedbackItems.map(item => (
                <div key={item.title}
                     className="bg-gray-700/50 p-3 rounded-lg w-full cursor-pointer"
                     onMouseEnter={() => setHighlightedWords(item.marked)}
                     onMouseLeave={() => setHighlightedWords([])}
                >
                  <div className="flex justify-between items-center font-semibold">
                    <span>{item.title}</span>
                    <span>{item.score}/{item.maxScore}</span>
                  </div>
                  <p className="text-sm text-gray-300 mt-1">{item.feedback}</p>
                </div>
              ))}
            </div>
          </div>
        </Popup>
      )}
    </main>
  )
}

export default TranslateTestPage
